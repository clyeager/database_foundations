/q
\q
SELECT * FROM orders;
SELECT side FROM orders;
\q
CREATE DATABASE yet_another_database
;
/list
\list
sql_book=# CREATE TABLE users (
  id serial UNIQUE NOT NULL,
  username char(25),
  enabled boolean DEFAULT TRUE
  );
CREATE TABLE users (
  id serial UNIQUE NOT NULL,
  username char(25),
  enabled boolean DEFAULT TRUE
  );
\q
CREATE TABLE countries (
id serial,
name varchar(50),
capital varchar(50),
population integer
);
DROP TABLE countries
;
\l
\q
\dt
CREATE TABLE countries (
id serial,
name varchar(50) UNIQUE NOT NULL,
capital varchar(50) NOT NULL,
population integer
);
\d
\d countries
CREATE TABLE famous_people (
id serial,
name varchar(100) NOT NULL,
occupation varchar(150),
date_of_birth varchar(50),
deceased 
boolean DEFAULT false
);
\d famous_people
CREATE TABLE animals (
id serial,
name varchar(100) NOT NULL,
binomial_name varchar(100) NOT NULL,
max_weight_kg decimal(8,3),
max_age_years integer,
conservation_status char(2),
);
CREATE TABLE animals (
id serial,
name varchar(100) NOT NULL,
binomial_name varchar(100) NOT NULL,
max_weight_kg decimal(8,3),
max_age_years integer,
conservation_status char(2)
);
\d animals
\dt encyclopedia
\dt
\d animals
CREATE DATABASE ls_burger
\c ls_burger
\list
CREATE TABLE orders (
id serial,
customer_name varchar(100) NOT NULL,
burger varchar(50),
side varchar(50),
drink varchar(50),
order_total decimal(4,2) NOT NULL
);
\dt
\d
\d orders
DROP TABLE orders
;
\d orders
CREATE TABLE orders (
id serial;
customer_name varchar(100) NOT NULL,
sdf
d
);
CREATE TABLE orders (
id serial,
customer_name varchar(100) NOT NULL,
burger varchar(50),
side varchar(50),
drink varchar(50),
order_total decimal(4,2) NOT NULL
);
\d orders
\d users
\c sql_book
\d users
ALTER TABLE users
RENAME TO all_users;
\d all_users
ALTER TABLE all_users
RENAME COLUMN username TO full_name;
\d all_users
ALTER TABLE all_users
ALTER COLUMN full_name TYPE varchar(25);
\d all_users
ALTER TABLE all_users
ALTER COLUMN full_name SET NOT NULL;
DROP TABLE all_users;
\c encyclopedia
ALTER TABLE famous_people
RENAME TO celebrities;
ALTER TABLE celebrities
RENAME COLUMN name TO first_name;
ALTER TABLE celebrities
ALTER COLUMN first_name TYPE varchar(80);
ALTER TABLE celebrities
ALL COLUMN last_name varchar(100) NOT NULL;
ALTER TABLE celebrities
ALTER COLUMN last_name varchar(100) NOT NULL;
ALTER TABLE celebrities
ADD COLUMN last_name varchar(100) NOT NULL;
ALTER TABLE celebrities
ALTER COLUMN date_of_birth TYPE date
USING date_of_birth::date,
ALTER COLUMN date_of_birth SET NOT NULL;
ALTER TABLE animals
ALTER COLUMN max_weight_kg TYPE decimal(10,4);
ALTER TABLE animals
ALTER COLUMN binomial_name SET;
ALTER TABLE
ADD CONSTRAINT unique_binomial_name UNIQUE (binomial_name);
ALTER TABLE animals
ADDD CONSTRAINT unique_binomial_name UNIQUE (binomial_name);
ALTER TABLE animals
ADD CONSTRAINT unique_binomial_name UNIQUE (binomial_name);
\c ls_burger
ALTER TABLE orders
;
ALTER TABLE orders (
customer email varchar(50),
customer_loyalty_points INT DEFAULT 0,
);
\dt animals
ALTER TABLE orders
ADD COLUMN customer_email varchar(50),
ADD COLUMN customer_loyalty_points integer DEFAULT 0;
ALTER TABLE orders
ADD COLUMN burger_cost decimal(4,2) DEFAULT 0,
ADD COLUMN side_cost decimal(4,2) DEFAULT 0,
ADD COLUMN drink_cost decimal(4,2) DEFAULT 0;
ALTER TABLE
;
ALTER TABLE orders
DROP COLUMN order_total;
\c sql_book
CREATE TABLE users (
    id serial UNIQUE NOT NULL,
    full_name character varying(25) NOT NULL,
    enabled boolean DEFAULT true,
    last_login timestamp without time zone DEFAULT now()
);
\dt
\d users
ALTER TABLE users ADD CHECK (full_name <> '');
\c encyclopedia
\dt countries
\d countries
INSERT INTO countries (name, capital, population)
VALUES(France, Paris, 67,158,000);
INSERT INTO countries (name, capital, population)
VALUES('France', 'Paris', 67158000);
INSERT INTO countries (name, capital, population)
VALUES ('USA', 'Washington D.C.', 325365189), ('Germany', 'Berlin', 82349400), ('Japan', 'Tokyo', 126672000);
\d countires
\d countries
\dt
\d celebrities
INSERT INTO celebrities (first_name, last_name, date_of_birth, deceased)
VALUES ('Bruce', 'Springsteen', 19490923, false);
INSERT INTO celebrities (first_name, last_name, occupation, date_of_birth, deceased)
VALUES ('Bruce', 'Springsteen', 'Singer, Songwriter', '1949-09-23', false);
\dt celebrities
SELECT * FROM celebrities
;
DROP TABLE celebrities
;
\dt celebrities
CREATE TABLE celebrities (
id serial,
first_name varchar(100) NOT NULL,
last_name varchar(100) NOT NULL,
occupation varchar(150),
date_of_birth varchar(50),
deceased boolean DEFAULT false
);
ALTER TABLE celebrities
ALTER COLUMN first_name TYPE varchar(80);
ALTER TABLE celebrities
ALTER COLUMN date_of_birth TYPE date
USING date_of_birth::date,
ALTER COLUMN date_of_birth SET NOT NULL;
SELECT * FROM celebrities
;
INSERT INTO countries (name, capital, population)
VALUES ('France', 'Paris', 67158000);
SELECT * FROM countries
;
INSERT INTO celebrities (first_name, last_name, occupation, date_of_birth, deceased)
VALUES ('Bruce', 'Springsteen', 'Singer/Songwriter', 19490923, false);
INSERT INTO celebrities (first_name, last_name, occupation, date_of_birth, deceased)
VALUES ('Bruce', 'Springsteen', 'Singer/Songwriter', 1949-09-23, false);
INSERT INTO celebrities (first_name, last_name, occupation, date_of_birth, deceased)
 VALUES ('Bruce', 'Springsteen', 'Singer/Songwriter', '19490923', false);
INSERT INTO celebrities (first_name, last_name, occupation, date_of_birth)
VALUES ('Scarlett', 'Johansson', 'actress', '19841122');
INSERT INTO celebrities (first_name, last_name, occupation, date_of_birth, deceased)
VALUES ('Frank', 'Sinatra', 'Singer/Actor', '1915-12-12' true), ('Tom', 'Cruise', 'Actor', '19620403' DEFAULT);
INSERT INTO celebrities (first_name, last_name, occupation, date_of_birth, deceased)
VALUES ('Frank', 'Sinatra', 'Singer/Actor', '1915-12-12', true), ('Tom', 'Cruise', 'Actor', '19620403' DEFAULT);
INSERT INTO celebrities (first_name, last_name, occupation, date_of_birth, deceased)
VALUES ('Frank', 'Sinatra', 'Singer/Actor', '1915-12-12', true), ('Tom', 'Cruise', 'Actor', '19620403', DEFAULT);
ALTER TABLE
ALTER COLUMN last_name DROP CONSTRAINT NOT NULL;
ALTER TABLE celebrities
ALTER COLUMN last_name DROP COMSTRAINT NOT NULL;
ALTER TABLE celebrities
ALTER COLUMN last_name DROP CONSTRAINT NOT NULL;
ALTER TABLE celebrities
ALTER COLUMN last_name DROP NOT NULL;
INSERT INTO celebrities (first_name, occupation, date_of_birth, deceased)
VALUES ('Madonna', 'Singer/Actress', '19580816', false), ('Prince', 'Singer/Actor/Songwriter/Musician', '19580607', true);
INSERT INTO celebrities (first_name, last_name, occupation, date_of_birth, deceased)
   VALUES ('Elvis', 'Presley', 'Singer, Musician, Actor', '1935-08-01', NULL);
\d animals
ALTER TABLE animals
ALTER COLUMN binomial_name DROP UNIQUE;
ALTER TABLE animals
DROP CONSTRAINT unique_binonmial_name UNIQUE(binomial_name); 
ALTER TABLE animals
DROP CONSTRAINT unique_binomial_name;
INSERT INTO animals (name, binomial_name, max_weight_kg, max_age_years, conservation_status)
VALUES ('Dove', 'Columbidae Columbiformes', 2, 15, 'LC'),
('Golden Eagle', 'Aquila Chrysaetos', 6.35, 24, 'LC'),
('Peregrine Falcon', 'Falco Peregrinus', 1.5, 15, 'LC'),
                    ('Pigeon', 'Columbidae Columbiformes', 2, 15, 'LC'),
                    ('Kakapo', 'Strigops habroptila', 4, 60,'CR');
\c ls_burger
\d orders
INSERT INTO orders (customer_name, burger, side, drink, customer_email, customer_loyalty_points, burger_cost, side_cost, drink_cost)
VALUES ('James Bergman', 'LS Chicken Burger', 'Fries', 'Cola', 'james1998@email.com', 20, 4.50, 0.99, 1.50),
('Natasha O''Shea', 'LS Cheeseburger', 'Fries', NULL, 'natasha@osheafamily.com', 18, 3.50, 0.99),
('Natasha O''Shea', 'LS Double Deluxe Burger', 'Onion Rings', 'Chocolate Shake', 'natasha@osheafamily.com', 42, 6.00, 1.50, 2.00),
('Aaron Muller', 'LS Burger', NULL, NULL, NULL, 10, 3.00, DEFAULT, DEFAULT);
INSERT INTO orders (customer_name, burger, side, drink, customer_email, customer_loyalty_points, burger_cost, side_cost, drink_cost)
VALUES ('James Bergman', 'LS Chicken Burger', 'Fries', 'Cola', 'james1998@email.com', 20, 4.50, 0.99, 1.50),
('Natasha O''Shea', 'LS Cheeseburger', 'Fries', NULL, 'natasha@osheafamily.com', 18, 3.50, 0.99, DEFAULT),
('Natasha O''Shea', 'LS Double Deluxe Burger', 'Onion Rings', 'Chocolate Shake', 'natasha@osheafamily.com', 42, 6.00, 1.50, 2.00),
('Aaron Muller', 'LS Burger', NULL, NULL, NULL, 10, 3.00, DEFAULT, DEFAULT);
\c encyclopedia
SELECT population FROM countries WHERE country = 'USA';
\d countries
SELECT population FROM countries WHERE name = 'USA';
SELECT population, capital FROM countries;
SELECT name FROM countries ORDER BY name;
SELECT name, capital FROM countries ORDER BY population;
SELECT name, capital FROM countries ORDER BY population DESC;
SELECT name, binomial_name, max_weight_kg, max_age_years FROM animals
ORDER BY max_age_years, max_weight_kg;
SELECT name FROM countries WHERE population > 70000000;
SELECT name FROM countries WHERE population > 70000000 AND population < 200000000;
SELECT first_name, last_name FROM celebrities WHERE deceased <> 'true';
SELECT first_name, last_name FROM celebrities WHERE occupation LIKE '%singer%';
SELECT first_name, last_name FROM celebrities WHERE occupation LIKE '%singer';
SELECT first_name, last_name FROM celebrities WHERE occupation LIKE 'singer%';
SELECT first_name, last_name FROM celebrities WHERE occupation LIKE '%singer/%';
\d celebrities
SELECT * FROM celebrities
;
SELECT first_name, last_name FROM celebrities WHERE occupation LIKE '%Singer%';
SELECT first_name, last_name FROM celebrities
WHERE occupation LIKE '%Actor%'
OR occupation LIKE '%Actress%';
SELECT first_name, last_name FROM celebrities
WHERE occupation LIKE '%Singer%'
AND occupation LIKE '%Actress%'
OR occupation LIKE '%Actor%';
SELECT first_name, last_name FROM celebrities
WHERE occupation LIKE '%Singer%'
(AND occupation LIKE '%Actress%' OR occupation LIKE '%Actor%');
SELECT first_name, last_name FROM celebrities
WHERE occupation LIKE '%Singer%'
AND (occupation LIKE '%Actress%' OR occupation LIKE '%Actor%');
\c ls_burger
\d orders
SELECT burger FROM orders WHERE burger_cost < 5.00 ORDER BY burger_cost;
SELECT customer_name, email_address, loyalty_points FROM orders
WHERE loyalty_points > 19 ORDER BY DESC;
SELECT customer_name, email_address, loyalty_points FROM orders
WHERE loyalty_points > 19 ORDER BY loyalty_points DESC;
SELECT customer_name, customer_email, loyalty_points FROM orders
WHERE loyalty_points > 19 ORDER BY loyalty_points DESC;
SELECT customer_name, customer_email, customer_loyalty_points FROM orders
WHERE loyalty_points > 19 ORDER BY loyalty_points DESC;
SELECT customer_name, customer_email, customer_loyalty_points FROM orders
WHERE customer_loyalty_points > 19 ORDER BY customer_loyalty_points DESC;
SELECT burgers FROM orders WHERE customer_name = 'Natasha O''Shea';
SELECT burger FROM orders WHERE customer_name = 'Natasha O''Shea';
SELECT customer_name FROM orders WHERE drink = NULL;
SELECT customer_name FROM orders WHERE drink = 'NULL';
SELECT customer_name FROM orders WHERE drink = DEFAULT;
SELECT burger, side, drink FROM orders WHERE side != 'fries';
SELECT burger, side, drink FROM orders
WHERE side IS NOT NULL AND drink IS NOT NULL;
\c encyclopedia
\d countries
SELECT id, name, capital, population FROM countries LIMIT 1;
SELECT name max(population)  FROM countries; 
SELECT name FROM countries ORDER BY population DESC OFFSET 1;
SELECT name FROM countries ORDER BY population DESC LIMIT 1 OFFSET 1;
SELECT DISTINCT binomial_name FROM animals;
SELECT binomial_name(length) FROM animals ORDER BY binomial_name(length) DESC LIMIT 1;
SELECT length(binomial_name) FROM animals ORDER BY length(binomial_name) DESC LIMIT 1;
SELECT binomial_name FROM animals ORDER BY length(binomial_name) DESC LIMIT 1;
SELECT first_name FROM celebrities WHERE date_part('year') = '1958';
SELECT first_name FROM celebrities WHERE date_part('year') = 1958;
SELECT max(age) FROM animals
;
\d animals
SELECT max(max_age_years) FROM animals
;
SELECT avg(max_weight_kg) FROM animals
;
SELECT count(id) FROM countries;
SELECT sum(population) FROM countries;
SELECT UNIQUE conservation_status, count(conservation_status FROM animals;
)
;
 SELECT UNIQUE conservation_status, count(conservation_status) FROM animals;
\d aniamls
\d animals
SELECT DISTINCT conservation_status, count(conservation_status) FROM animals;
\s ls_burger
